name: Deploy to EC2

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # 3. Gradle 빌드
      - name: Build with Gradle
        run: |
          cd backend/jimechu
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # ★★★ 진단 1: 빌드 결과물 확인 ★★★
      - name: Verify build artifact
        run: ls -lR backend/jimechu/build/libs

      # 4. 빌드된 JAR 파일을 EC2로 전송
      - name: Transfer JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "backend/jimechu/build/libs/*.jar"
          target: "/home/ec2-user/temp" # 임시 위치로 전송

      # ★★★ 진단 2: EC2 파일 전송 결과 확인 ★★★
      - name: Verify file transfer on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo "--- Verifying files in /home/ec2-user/temp ---"
            ls -laR /home/ec2-user/temp

      # 5. 파일 정리 및 application-prod.yml 생성, 배포 스크립트 실행
      - name: Deploy application on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            APP_DIR="/home/ec2-user/app"
            LIBS_DIR="/home/ec2-user/app/libs"

            # libs 디렉터리 생성
            mkdir -p ${LIBS_DIR}

            # 기존 JAR 파일 정리
            rm -f ${LIBS_DIR}/*.jar

            # temp에서 실제 JAR 파일 찾아서 libs로 복사 (jimechu-app.jar로 이름 변경)
            find /home/ec2-user/temp -name "jimechu-0.0.1-SNAPSHOT.jar" -exec cp {} ${LIBS_DIR}/jimechu-app.jar \;

            # temp 디렉터리 정리
            rm -rf /home/ec2-user/temp

            # 복사 결과 확인
            echo "--- Final JAR file location ---"
            ls -la ${LIBS_DIR}/

            # application-prod.yml 생성
            cat > ${LIBS_DIR}/application-prod.yml <<EOF
            spring:
              datasource:
                driver-class-name: org.postgresql.Driver
                url: jdbc:postgresql://${{ secrets.RDS_HOSTNAME }}:5432/${{ secrets.RDS_DB_NAME }}
                username: ${{ secrets.RDS_USERNAME }}
                password: ${{ secrets.RDS_PASSWORD }}
              jpa:
                hibernate:
                  ddl-auto: create 
                properties:
                  hibernate:
                    dialect: org.hibernate.dialect.PostgreSQLDialect
                    format_sql: true
                    show_sql: true
              data:
                redis:
                  host: localhost
                  port: 6379

            jwt:
              secret-key: ${{ secrets.JWT_SECRET }}
              access-expiration-time: 3600000
              refresh-expiration-time: 604800000
              
            admin:
              password: ${{ secrets.ADMIN_PASSWORD }}
            EOF

            # 배포 스크립트 실행
            sh ${APP_DIR}/deploy.sh
