name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      # 3. Gradle 빌드
      - name: Build with Gradle
        working-directory: backend/jimechu
        run: sh gradlew clean build -x test

      # 4. jar 파일을 EC2 서버로 전송 (버전 업데이트)
      - name: Copy artifact to EC2
        uses: appleboy/scp-action@v0.1.7 # 👈 수정: v0.1.4 -> v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          debug: true
          source: "backend/jimechu/build/libs/jimechu-0.0.1-SNAPSHOT.jar"
          target: "/home/ec2-user/app/"

      # 5. EC2 서버에서 무중단 배포 스크립트 실행 (최후의 최종 완성 버전)
      - name: Deploy application on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # EC2 서버에 .env 파일을 생성합니다.
            # Spring Boot가 공식적으로 인식하는 환경 변수 이름을 사용합니다.
            cat > /home/ec2-user/app/.env <<EOF
            SPRING_DATASOURCE_URL=jdbc:postgresql://${{ secrets.RDS_HOSTNAME }}:5432/${{ secrets.RDS_DB_NAME }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.RDS_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.RDS_PASSWORD }}
            SPRING_DATA_REDIS_HOST=localhost
            SPRING_DATA_REDIS_PORT=6379
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET }}
            JWT_ACCESS_EXPIRATION_TIME=3600000
            JWT_REFRESH_EXPIRATION_TIME=604800000
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            EOF

            # EC2에 준비해 둔 배포 스크립트를 실행합니다.
            sh /home/ec2-user/app/deploy.sh
