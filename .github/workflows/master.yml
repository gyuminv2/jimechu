name: Deploy to EC2

on:
  push:
    branches:
      - master
    workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # 3. Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: |
          cd backend/jimechu
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 4. 빌드된 JAR 파일을 EC2로 전송 (경로/이름 단순화)
      - name: Transfer JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "backend/jimechu/build/libs/jimechu-0.0.1-SNAPSHOT.jar"
          target: "/home/ec2-user/app/libs"
          rename: "jimechu-app.jar" # 서버에서 사용할 파일 이름을 'jimechu-app.jar'로 고정

      # 5. EC2 서버에 application-prod.yml 생성 및 배포 스크립트 실행
      - name: Deploy application on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            APP_DIR="/home/ec2-user/app"
            LIBS_DIR="/home/ec2-user/app/libs"

            # libs 디렉터리가 없으면 생성
            mkdir -p ${LIBS_DIR}

            # 해당 디렉토리에 application-prod.yml 파일을 생성합니다.
            cat > ${LIBS_DIR}/application-prod.yml <<EOF
            spring:
              datasource:
                driver-class-name: org.postgresql.Driver
                url: jdbc:postgresql://${{ secrets.RDS_HOSTNAME }}:5432/${{ secrets.RDS_DB_NAME }}
                username: ${{ secrets.RDS_USERNAME }}
                password: ${{ secrets.RDS_PASSWORD }}
              jpa:
                hibernate:
                  # 첫 배포 시 테이블을 확실히 생성합니다.
                  ddl-auto: create 
                properties:
                  hibernate:
                    dialect: org.hibernate.dialect.PostgreSQLDialect
                    format_sql: true
                    show_sql: true
              data:
                redis:
                  host: localhost
                  port: 6379

            jwt:
              secret-key: ${{ secrets.JWT_SECRET }}
              access-expiration-time: 3600000
              refresh-expiration-time: 604800000
              
            admin:
              password: ${{ secrets.ADMIN_PASSWORD }}
            EOF

            # 배포 스크립트는 app 디렉터리에 있는 것을 실행
            sh ${APP_DIR}/deploy.sh
